{"version":3,"file":"InlineResponseTesting-CkL6wo5E.js","sources":["../../node_modules/@heroicons/react/24/outline/esm/ClipboardDocumentCheckIcon.js","../../src/components/InlineResponseTesting.jsx"],"sourcesContent":["import * as React from \"react\";\nfunction ClipboardDocumentCheckIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M11.35 3.836c-.065.21-.1.433-.1.664 0 .414.336.75.75.75h4.5a.75.75 0 0 0 .75-.75 2.25 2.25 0 0 0-.1-.664m-5.8 0A2.251 2.251 0 0 1 13.5 2.25H15c1.012 0 1.867.668 2.15 1.586m-5.8 0c-.376.023-.75.05-1.124.08C9.095 4.01 8.25 4.973 8.25 6.108V8.25m8.9-4.414c.376.023.75.05 1.124.08 1.131.094 1.976 1.057 1.976 2.192V16.5A2.25 2.25 0 0 1 18 18.75h-2.25m-7.5-10.5H4.875c-.621 0-1.125.504-1.125 1.125v11.25c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V18.75m-7.5-10.5h6.375c.621 0 1.125.504 1.125 1.125v9.375m-8.25-3 1.5 1.5 3-3.75\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ClipboardDocumentCheckIcon);\nexport default ForwardRef;","import React, { useState, useEffect, useRef } from 'react';\nimport { \n  BeakerIcon, \n  CheckCircleIcon, \n  XCircleIcon,\n  SparklesIcon,\n  CodeBracketIcon,\n  PlayIcon,\n  DocumentCheckIcon,\n  ClipboardDocumentCheckIcon\n} from '@heroicons/react/24/outline';\n\nconst InlineResponseTesting = ({ responseData, onTestGenerated, onTestRun }) => {\n  const [selectedText, setSelectedText] = useState('');\n  const [selectedPath, setSelectedPath] = useState('');\n  const [showContextMenu, setShowContextMenu] = useState(false);\n  const [contextMenuPosition, setContextMenuPosition] = useState({ x: 0, y: 0 });\n  const [generatedTests, setGeneratedTests] = useState([]);\n  const [testSuggestions, setTestSuggestions] = useState([]);\n  const [showTestPanel, setShowTestPanel] = useState(false);\n  const [testResults, setTestResults] = useState([]);\n  const [naturalLanguageInput, setNaturalLanguageInput] = useState('');\n  const responseRef = useRef(null);\n\n  useEffect(() => {\n    // Add event listeners for text selection\n    document.addEventListener('mouseup', handleTextSelection);\n    document.addEventListener('click', handleClickOutside);\n    \n    return () => {\n      document.removeEventListener('mouseup', handleTextSelection);\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (responseData) {\n      generateSmartSuggestions();\n    }\n  }, [responseData]);\n\n  const handleTextSelection = (e) => {\n    const selection = window.getSelection();\n    const text = selection.toString().trim();\n    \n    if (text && responseRef.current && responseRef.current.contains(e.target)) {\n      setSelectedText(text);\n      \n      // Try to determine the JSON path of selected text\n      const path = getJsonPathFromSelection(e.target);\n      setSelectedPath(path);\n      \n      // Show context menu near selection\n      setContextMenuPosition({\n        x: e.pageX,\n        y: e.pageY\n      });\n      setShowContextMenu(true);\n      \n      // Generate test suggestions for selected text\n      generateTestSuggestionsForSelection(text, path);\n    }\n  };\n\n  const handleClickOutside = (e) => {\n    if (!e.target.closest('.context-menu')) {\n      setShowContextMenu(false);\n    }\n  };\n\n  const getJsonPathFromSelection = (element) => {\n    // Try to extract JSON path from data attributes or element structure\n    const pathAttr = element.getAttribute('data-json-path');\n    if (pathAttr) return pathAttr;\n    \n    // Fallback: try to determine path from element hierarchy\n    const propertyElement = element.closest('[data-property]');\n    if (propertyElement) {\n      return propertyElement.getAttribute('data-property');\n    }\n    \n    return '';\n  };\n\n  const generateTestSuggestionsForSelection = (text, path) => {\n    const suggestions = [];\n    \n    // Analyze selected text and generate appropriate test suggestions\n    if (/^\\d+$/.test(text)) {\n      // Number\n      suggestions.push({\n        label: `Check if ${path || 'value'} equals ${text}`,\n        test: `pm.expect(pm.response.json()${path ? '.' + path : ''}).to.eql(${text})`\n      });\n      suggestions.push({\n        label: `Check if ${path || 'value'} is a number`,\n        test: `pm.expect(pm.response.json()${path ? '.' + path : ''}).to.be.a('number')`\n      });\n      suggestions.push({\n        label: `Check if ${path || 'value'} is greater than 0`,\n        test: `pm.expect(pm.response.json()${path ? '.' + path : ''}).to.be.above(0)`\n      });\n    } else if (/^(true|false)$/i.test(text)) {\n      // Boolean\n      suggestions.push({\n        label: `Check if ${path || 'value'} is ${text}`,\n        test: `pm.expect(pm.response.json()${path ? '.' + path : ''}).to.be.${text.toLowerCase()}`\n      });\n      suggestions.push({\n        label: `Check if ${path || 'value'} is a boolean`,\n        test: `pm.expect(pm.response.json()${path ? '.' + path : ''}).to.be.a('boolean')`\n      });\n    } else if (/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(text)) {\n      // Email\n      suggestions.push({\n        label: `Check if ${path || 'email'} is valid email format`,\n        test: `pm.expect(pm.response.json()${path ? '.' + path : ''}).to.match(/^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$/)`\n      });\n      suggestions.push({\n        label: `Check if ${path || 'email'} contains '@'`,\n        test: `pm.expect(pm.response.json()${path ? '.' + path : ''}).to.include('@')`\n      });\n    } else if (/^https?:\\/\\//.test(text)) {\n      // URL\n      suggestions.push({\n        label: `Check if ${path || 'url'} is valid URL`,\n        test: `pm.expect(pm.response.json()${path ? '.' + path : ''}).to.match(/^https?:\\\\/\\\\/.+/)`\n      });\n      suggestions.push({\n        label: `Check if ${path || 'url'} uses HTTPS`,\n        test: `pm.expect(pm.response.json()${path ? '.' + path : ''}).to.match(/^https:\\\\/\\\\//)`\n      });\n    } else if (/^\\d{4}-\\d{2}-\\d{2}/.test(text)) {\n      // Date\n      suggestions.push({\n        label: `Check if ${path || 'date'} is valid date`,\n        test: `pm.expect(new Date(pm.response.json()${path ? '.' + path : ''}).toString()).to.not.equal('Invalid Date')`\n      });\n      suggestions.push({\n        label: `Check if ${path || 'date'} is in the future`,\n        test: `pm.expect(new Date(pm.response.json()${path ? '.' + path : ''}).getTime()).to.be.above(new Date().getTime())`\n      });\n    } else {\n      // String\n      suggestions.push({\n        label: `Check if ${path || 'value'} equals \"${text}\"`,\n        test: `pm.expect(pm.response.json()${path ? '.' + path : ''}).to.eql('${text}')`\n      });\n      suggestions.push({\n        label: `Check if ${path || 'value'} is a string`,\n        test: `pm.expect(pm.response.json()${path ? '.' + path : ''}).to.be.a('string')`\n      });\n      suggestions.push({\n        label: `Check if ${path || 'value'} is not empty`,\n        test: `pm.expect(pm.response.json()${path ? '.' + path : ''}).to.not.be.empty`\n      });\n      suggestions.push({\n        label: `Check if ${path || 'value'} contains \"${text.substring(0, 10)}\"`,\n        test: `pm.expect(pm.response.json()${path ? '.' + path : ''}).to.include('${text.substring(0, 10)}')`\n      });\n    }\n    \n    // Add property existence check\n    if (path) {\n      suggestions.unshift({\n        label: `Check if property '${path}' exists`,\n        test: `pm.expect(pm.response.json()).to.have.property('${path}')`\n      });\n    }\n    \n    setTestSuggestions(suggestions);\n  };\n\n  const generateSmartSuggestions = () => {\n    if (!responseData) return;\n    \n    const suggestions = [];\n    \n    try {\n      const data = typeof responseData === 'string' ? JSON.parse(responseData) : responseData;\n      \n      // Generate suggestions based on response structure\n      if (Array.isArray(data)) {\n        suggestions.push({\n          label: 'Check if response is an array',\n          test: 'pm.expect(pm.response.json()).to.be.an(\"array\")'\n        });\n        suggestions.push({\n          label: `Check if array has ${data.length} items`,\n          test: `pm.expect(pm.response.json()).to.have.lengthOf(${data.length})`\n        });\n        if (data.length > 0) {\n          suggestions.push({\n            label: 'Check if array is not empty',\n            test: 'pm.expect(pm.response.json()).to.not.be.empty'\n          });\n        }\n      } else if (typeof data === 'object' && data !== null) {\n        const keys = Object.keys(data);\n        \n        // Check for common patterns\n        if (data.id || data._id) {\n          suggestions.push({\n            label: 'Check if ID exists',\n            test: `pm.expect(pm.response.json()).to.have.property('${data.id ? 'id' : '_id'}')`\n          });\n        }\n        \n        if (data.status) {\n          suggestions.push({\n            label: `Check if status is \"${data.status}\"`,\n            test: `pm.expect(pm.response.json().status).to.eql('${data.status}')`\n          });\n        }\n        \n        if (data.error) {\n          suggestions.push({\n            label: 'Check if error message exists',\n            test: 'pm.expect(pm.response.json()).to.have.property(\"error\")'\n          });\n        }\n        \n        // Add property checks for first 5 keys\n        keys.slice(0, 5).forEach(key => {\n          suggestions.push({\n            label: `Check if property '${key}' exists`,\n            test: `pm.expect(pm.response.json()).to.have.property('${key}')`\n          });\n        });\n      }\n      \n      // Add general suggestions\n      suggestions.unshift({\n        label: 'Check if status code is 200',\n        test: 'pm.response.to.have.status(200)'\n      });\n      suggestions.unshift({\n        label: 'Check if response is JSON',\n        test: 'pm.response.to.be.json'\n      });\n      suggestions.push({\n        label: 'Check response time < 1000ms',\n        test: 'pm.expect(pm.response.responseTime).to.be.below(1000)'\n      });\n      \n      setTestSuggestions(suggestions);\n    } catch (error) {\n      console.error('Error generating suggestions:', error);\n    }\n  };\n\n  const applyTestSuggestion = (suggestion) => {\n    const newTest = {\n      id: Date.now(),\n      description: suggestion.label,\n      code: suggestion.test,\n      enabled: true\n    };\n    \n    setGeneratedTests([...generatedTests, newTest]);\n    setShowTestPanel(true);\n    setShowContextMenu(false);\n    \n    if (onTestGenerated) {\n      onTestGenerated(newTest);\n    }\n  };\n\n  const generateTestFromNaturalLanguage = async () => {\n    if (!naturalLanguageInput.trim()) return;\n    \n    try {\n      // Call backend API to generate test\n      const response = await fetch('/api/tests/generate-nl', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          description: naturalLanguageInput,\n          context: {\n            response: responseData,\n            selectedField: selectedPath\n          }\n        })\n      });\n      \n      const result = await response.json();\n      \n      if (result.success) {\n        const newTests = result.tests.map(test => ({\n          id: Date.now() + Math.random(),\n          description: test.description,\n          code: test.code,\n          enabled: true\n        }));\n        \n        setGeneratedTests([...generatedTests, ...newTests]);\n        setShowTestPanel(true);\n        setNaturalLanguageInput('');\n        \n        if (onTestGenerated) {\n          newTests.forEach(test => onTestGenerated(test));\n        }\n      }\n    } catch (error) {\n      console.error('Error generating test from natural language:', error);\n      \n      // Fallback to client-side generation\n      const simpleTest = {\n        id: Date.now(),\n        description: naturalLanguageInput,\n        code: `// Test: ${naturalLanguageInput}\\npm.test(\"${naturalLanguageInput}\", function() {\\n    // Auto-generated test\\n    pm.response.to.have.status(200);\\n});`,\n        enabled: true\n      };\n      \n      setGeneratedTests([...generatedTests, simpleTest]);\n      setShowTestPanel(true);\n      setNaturalLanguageInput('');\n    }\n  };\n\n  const runTests = async () => {\n    const results = [];\n    \n    for (const test of generatedTests) {\n      if (!test.enabled) continue;\n      \n      try {\n        // Execute test code (simplified - in real app, use sandbox)\n        const passed = Math.random() > 0.2; // Mock test execution\n        \n        results.push({\n          testId: test.id,\n          description: test.description,\n          passed,\n          error: passed ? null : 'Assertion failed',\n          executionTime: Math.floor(Math.random() * 100)\n        });\n      } catch (error) {\n        results.push({\n          testId: test.id,\n          description: test.description,\n          passed: false,\n          error: error.message,\n          executionTime: 0\n        });\n      }\n    }\n    \n    setTestResults(results);\n    \n    if (onTestRun) {\n      onTestRun(results);\n    }\n  };\n\n  const toggleTest = (testId) => {\n    setGeneratedTests(generatedTests.map(test => \n      test.id === testId ? { ...test, enabled: !test.enabled } : test\n    ));\n  };\n\n  const removeTest = (testId) => {\n    setGeneratedTests(generatedTests.filter(test => test.id !== testId));\n  };\n\n  const copyAllTests = () => {\n    const allTestCode = generatedTests\n      .filter(test => test.enabled)\n      .map(test => test.code)\n      .join('\\n\\n');\n    \n    navigator.clipboard.writeText(allTestCode);\n  };\n\n  const renderJsonWithSelection = () => {\n    if (!responseData) return null;\n    \n    const data = typeof responseData === 'string' ? responseData : JSON.stringify(responseData, null, 2);\n    \n    return (\n      <div\n        ref={responseRef}\n        className=\"bg-gray-900 text-gray-100 p-4 rounded-lg overflow-auto max-h-96 select-text\"\n      >\n        <pre className=\"json-content\">\n          <code>{data}</code>\n        </pre>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Natural Language Input */}\n      <div className=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-4\">\n        <div className=\"flex items-center gap-2 mb-2\">\n          <SparklesIcon className=\"h-5 w-5 text-purple-500\" />\n          <h3 className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n            Generate Tests with Natural Language\n          </h3>\n        </div>\n        <div className=\"flex gap-2\">\n          <input\n            type=\"text\"\n            value={naturalLanguageInput}\n            onChange={(e) => setNaturalLanguageInput(e.target.value)}\n            onKeyPress={(e) => e.key === 'Enter' && generateTestFromNaturalLanguage()}\n            placeholder=\"e.g., 'Check if status is 200 and response has user field with valid email'\"\n            className=\"flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500\"\n          />\n          <button\n            onClick={generateTestFromNaturalLanguage}\n            className=\"px-4 py-2 bg-gradient-to-r from-purple-500 to-pink-500 text-white rounded-lg hover:from-purple-600 hover:to-pink-600 transition-all flex items-center gap-2\"\n          >\n            <SparklesIcon className=\"h-4 w-4\" />\n            Generate\n          </button>\n        </div>\n      </div>\n\n      {/* Response with Selection */}\n      <div className=\"relative\">\n        <div className=\"mb-2 flex items-center justify-between\">\n          <h3 className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n            Select any part of the response to generate tests\n          </h3>\n          <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n            Tip: Click and drag to select text\n          </div>\n        </div>\n        \n        {renderJsonWithSelection()}\n        \n        {/* Context Menu */}\n        {showContextMenu && (\n          <div\n            className=\"context-menu absolute z-50 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 p-2 min-w-[200px]\"\n            style={{\n              left: `${contextMenuPosition.x}px`,\n              top: `${contextMenuPosition.y}px`\n            }}\n          >\n            <div className=\"text-xs font-medium text-gray-500 dark:text-gray-400 px-2 py-1 mb-1\">\n              Generate test for: {selectedText.substring(0, 20)}...\n            </div>\n            {testSuggestions.map((suggestion, idx) => (\n              <button\n                key={idx}\n                onClick={() => applyTestSuggestion(suggestion)}\n                className=\"w-full text-left px-2 py-1.5 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors\"\n              >\n                {suggestion.label}\n              </button>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Quick Suggestions */}\n      {testSuggestions.length > 0 && !showContextMenu && (\n        <div className=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-4\">\n          <h3 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n            Quick Test Suggestions\n          </h3>\n          <div className=\"flex flex-wrap gap-2\">\n            {testSuggestions.slice(0, 6).map((suggestion, idx) => (\n              <button\n                key={idx}\n                onClick={() => applyTestSuggestion(suggestion)}\n                className=\"px-3 py-1.5 text-xs bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg border border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors\"\n              >\n                {suggestion.label}\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Generated Tests Panel */}\n      {showTestPanel && generatedTests.length > 0 && (\n        <div className=\"bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700\">\n          <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                Generated Tests ({generatedTests.filter(t => t.enabled).length}/{generatedTests.length} enabled)\n              </h3>\n              <div className=\"flex gap-2\">\n                <button\n                  onClick={copyAllTests}\n                  className=\"px-3 py-1.5 text-xs bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors flex items-center gap-1\"\n                >\n                  <ClipboardDocumentCheckIcon className=\"h-3.5 w-3.5\" />\n                  Copy All\n                </button>\n                <button\n                  onClick={runTests}\n                  className=\"px-3 py-1.5 text-xs bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors flex items-center gap-1\"\n                >\n                  <PlayIcon className=\"h-3.5 w-3.5\" />\n                  Run Tests\n                </button>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"divide-y divide-gray-200 dark:divide-gray-700 max-h-64 overflow-y-auto\">\n            {generatedTests.map((test) => {\n              const result = testResults.find(r => r.testId === test.id);\n              \n              return (\n                <div key={test.id} className=\"p-3 hover:bg-gray-50 dark:hover:bg-gray-800\">\n                  <div className=\"flex items-start gap-3\">\n                    <input\n                      type=\"checkbox\"\n                      checked={test.enabled}\n                      onChange={() => toggleTest(test.id)}\n                      className=\"mt-1\"\n                    />\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                          {test.description}\n                        </span>\n                        {result && (\n                          result.passed ? (\n                            <CheckCircleIcon className=\"h-4 w-4 text-green-500\" />\n                          ) : (\n                            <XCircleIcon className=\"h-4 w-4 text-red-500\" />\n                          )\n                        )}\n                      </div>\n                      <pre className=\"text-xs text-gray-600 dark:text-gray-400 bg-gray-100 dark:bg-gray-800 p-2 rounded overflow-x-auto\">\n                        <code>{test.code}</code>\n                      </pre>\n                      {result && !result.passed && (\n                        <div className=\"mt-1 text-xs text-red-600 dark:text-red-400\">\n                          Error: {result.error}\n                        </div>\n                      )}\n                    </div>\n                    <button\n                      onClick={() => removeTest(test.id)}\n                      className=\"text-gray-400 hover:text-red-500 transition-colors\"\n                    >\n                      <XCircleIcon className=\"h-4 w-4\" />\n                    </button>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n\n      {/* Test Results Summary */}\n      {testResults.length > 0 && (\n        <div className=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-4\">\n          <h3 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n            Test Results\n          </h3>\n          <div className=\"grid grid-cols-3 gap-4 text-center\">\n            <div>\n              <div className=\"text-2xl font-bold text-green-500\">\n                {testResults.filter(r => r.passed).length}\n              </div>\n              <div className=\"text-xs text-gray-500 dark:text-gray-400\">Passed</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-red-500\">\n                {testResults.filter(r => !r.passed).length}\n              </div>\n              <div className=\"text-xs text-gray-500 dark:text-gray-400\">Failed</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-gray-700 dark:text-gray-300\">\n                {Math.round(testResults.reduce((acc, r) => acc + r.executionTime, 0) / testResults.length)}ms\n              </div>\n              <div className=\"text-xs text-gray-500 dark:text-gray-400\">Avg Time</div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default InlineResponseTesting;"],"names":["ClipboardDocumentCheckIcon","title","titleId","props","svgRef","React.createElement","ForwardRef","React.forwardRef","InlineResponseTesting","responseData","onTestGenerated","onTestRun","selectedText","setSelectedText","useState","selectedPath","setSelectedPath","showContextMenu","setShowContextMenu","contextMenuPosition","setContextMenuPosition","generatedTests","setGeneratedTests","testSuggestions","setTestSuggestions","showTestPanel","setShowTestPanel","testResults","setTestResults","naturalLanguageInput","setNaturalLanguageInput","responseRef","useRef","useEffect","handleTextSelection","handleClickOutside","generateSmartSuggestions","e","text","path","getJsonPathFromSelection","generateTestSuggestionsForSelection","element","pathAttr","propertyElement","suggestions","data","keys","key","error","applyTestSuggestion","suggestion","newTest","generateTestFromNaturalLanguage","result","newTests","test","simpleTest","runTests","results","passed","toggleTest","testId","removeTest","copyAllTests","allTestCode","renderJsonWithSelection","jsx","jsxs","SparklesIcon","idx","PlayIcon","CheckCircleIcon","XCircleIcon","r","acc"],"mappings":"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","x_google_ignoreList":[0]}