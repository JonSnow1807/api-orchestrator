name: Test API Orchestrator Action
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test-action:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Test Collection
        run: |
          cat > test-collection.json << 'EOF'
          {
            "info": {
              "name": "Test API Collection",
              "version": "1.0.0"
            },
            "item": [
              {
                "name": "Get Users",
                "request": {
                  "method": "GET",
                  "url": "https://jsonplaceholder.typicode.com/users",
                  "header": []
                },
                "response": [],
                "test": [
                  {
                    "name": "Status code is 200",
                    "script": {
                      "exec": [
                        "pm.test('Status code is 200', function () {",
                        "    pm.response.to.have.status(200);",
                        "});"
                      ]
                    }
                  }
                ]
              },
              {
                "name": "Get Single User",
                "request": {
                  "method": "GET",
                  "url": "https://jsonplaceholder.typicode.com/users/1",
                  "header": []
                },
                "response": [],
                "test": [
                  {
                    "name": "Response has user data",
                    "script": {
                      "exec": [
                        "pm.test('Response has user data', function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData).to.have.property('id');",
                        "    pm.expect(jsonData).to.have.property('name');",
                        "});"
                      ]
                    }
                  }
                ]
              }
            ]
          }
          EOF
      
      - name: Run API Tests
        continue-on-error: true
        uses: ./
        with:
          collection: './test-collection.json'
          environment: 'production'
          reporters: 'cli,json,junit'
          timeout: '30000'
          
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-results.json
            junit-report.xml
            
      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            if (!fs.existsSync('test-results.json')) {
              console.log('No test results file found');
              return;
            }

            const results = JSON.parse(fs.readFileSync('test-results.json', 'utf8'));

            const comment = `## API Test Results

            - **Total Tests**: ${results.total || 0}
            - **Passed**: ${results.passed || 0} ✅
            - **Failed**: ${results.failed || 0} ❌
            - **Pass Rate**: ${(results.pass_rate || 0).toFixed(1)}%
            - **Average Response Time**: ${(results.avg_response_time || 0).toFixed(2)}ms

            ${(results.failed || 0) > 0 ? '⚠️ Some tests failed. Please check the logs.' : '✅ All tests passed!'}`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
  performance-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Performance Test
        run: |
          cat > perf-test.json << 'EOF'
          {
            "info": {
              "name": "Performance Test"
            },
            "item": [
              {
                "name": "Load Test API",
                "request": {
                  "method": "GET",
                  "url": "https://jsonplaceholder.typicode.com/posts/1"
                }
              }
            ]
          }
          EOF
      
      - name: Run Performance Tests
        continue-on-error: true
        uses: ./
        with:
          collection: './perf-test.json'
          iterations: '10'
          reporters: 'json'
          
      - name: Check Performance Regression
        run: |
          if [ -f test-results.json ]; then
            AVG_TIME=$(jq -r '.avg_response_time // 0' test-results.json)
            echo "Average response time: ${AVG_TIME}ms"

            # Fail if response time > 2000ms
            if (( $(echo "$AVG_TIME > 2000" | bc -l) )); then
              echo "Performance regression detected!"
              exit 1
            fi
          else
            echo "No test results found"
          fi
          
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Security Scan
        continue-on-error: true
        uses: ./
        with:
          collection: './tests/security-scan.json'
          api-key: ${{ secrets.API_ORCHESTRATOR_KEY }}
          fail-on-error: 'true'