name: API Testing Pipeline
on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize, reopened]
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours

env:
  API_BASE_URL: ${{ secrets.API_BASE_URL }}
  API_KEY: ${{ secrets.API_KEY }}

jobs:
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Smoke Tests
        uses: ChinmayShrivastava/api-orchestrator@v1
        with:
          collection: './tests/smoke.json'
          environment: 'production'
          bail: 'true'  # Stop on first failure
          timeout: '10000'
          
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: smoke-tests
    strategy:
      matrix:
        service: [auth, users, billing, notifications]
    steps:
      - uses: actions/checkout@v3
      
      - name: Test ${{ matrix.service }} Service
        uses: ChinmayShrivastava/api-orchestrator@v1
        with:
          collection: './tests/${{ matrix.service }}.json'
          environment: 'production'
          reporters: 'cli,json,junit'
          
      - name: Upload Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.service }}-results
          path: test-results.json
          
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: smoke-tests
    steps:
      - uses: actions/checkout@v3
      
      - name: Checkout Baseline
        uses: actions/checkout@v3
        with:
          ref: main
          path: baseline
          
      - name: Run Performance Tests
        uses: ChinmayShrivastava/api-orchestrator@v1
        with:
          collection: './tests/performance.json'
          iterations: '100'
          reporters: 'json'
          
      - name: Compare with Baseline
        run: |
          CURRENT=$(jq '.avg_response_time' test-results.json)
          BASELINE=$(jq '.avg_response_time' baseline/perf-baseline.json)
          
          CHANGE=$(echo "scale=2; ($CURRENT - $BASELINE) / $BASELINE * 100" | bc)
          echo "Performance change: ${CHANGE}%"
          
          if (( $(echo "$CHANGE > 10" | bc -l) )); then
            echo "::error::Performance regression detected: ${CHANGE}% slower"
            exit 1
          fi
          
      - name: Update Baseline
        if: github.ref == 'refs/heads/main'
        run: cp test-results.json perf-baseline.json
        
      - name: Commit Baseline
        if: github.ref == 'refs/heads/main'
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: 'Update performance baseline'
          file_pattern: perf-baseline.json
          
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Security Tests
        uses: ChinmayShrivastava/api-orchestrator@v1
        with:
          collection: './tests/security.json'
          api-key: ${{ secrets.API_ORCHESTRATOR_KEY }}
          
      - name: Check for Vulnerabilities
        run: |
          VULNERABILITIES=$(jq '.security.vulnerabilities' test-results.json)
          if [ "$VULNERABILITIES" != "[]" ]; then
            echo "::error::Security vulnerabilities detected"
            echo "$VULNERABILITIES" | jq .
            exit 1
          fi
          
  contract-tests:
    name: Contract Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Validate API Contracts
        uses: ChinmayShrivastava/api-orchestrator@v1
        with:
          collection: './tests/contracts.json'
          environment: 'production'
          
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [integration-tests, contract-tests]
    steps:
      - uses: actions/checkout@v3
      
      - name: Run E2E Scenarios
        uses: ChinmayShrivastava/api-orchestrator@v1
        with:
          collection: './tests/e2e-scenarios.json'
          environment: 'production'
          reporters: 'cli,json,html'
          
      - name: Deploy Test Report
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./reports
          destination_dir: test-reports/${{ github.run_number }}
          
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    if: always()
    needs: [smoke-tests, integration-tests, performance-tests, security-scan, e2e-tests]
    steps:
      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            API Test Suite ${{ job.status }}
            Smoke: ${{ needs.smoke-tests.result }}
            Integration: ${{ needs.integration-tests.result }}
            Performance: ${{ needs.performance-tests.result }}
            Security: ${{ needs.security-scan.result }}
            E2E: ${{ needs.e2e-tests.result }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          
      - name: Create Issue on Failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `API Tests Failed - Run #${context.runNumber}`,
              body: `API tests failed in workflow run #${context.runNumber}.
              
              [View Details](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
              
              Please investigate and fix the failing tests.`,
              labels: ['bug', 'api-tests']
            });
            
            console.log(`Created issue #${issue.data.number}`);

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && success()
    needs: [e2e-tests, security-scan]
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy
        run: |
          echo "Deploying to production..."
          # Add your deployment commands here